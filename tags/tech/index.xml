<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tech on Peter Boone</title>
    <link>https://boonepeter.github.io/tags/tech/</link>
    <description>Recent content in tech on Peter Boone</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 08 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://boonepeter.github.io/tags/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sequencing my genome</title>
      <link>https://boonepeter.github.io/posts/personal-genome-sequencing/</link>
      <pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://boonepeter.github.io/posts/personal-genome-sequencing/</guid>
      <description>We&amp;rsquo;ve come a long way since the Human Genome Project. This effort to sequence the human genome for the first time was a tremendous acheivement that lasted 13 (ish) years and cost $3 billion dollars. Thanks to this pioneering work and major advancements over the years it&amp;rsquo;s now possible to get your own genome sequenced for $300 in a few months.
That&amp;rsquo;s a 10,000x decrease in cost! If the price of homes decreased at a similar rate since 1990, the median home would cost $7.</description>
    </item>
    
    <item>
      <title>NULL in BigQuery</title>
      <link>https://boonepeter.github.io/posts/null-in-bigquery/</link>
      <pubDate>Tue, 14 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://boonepeter.github.io/posts/null-in-bigquery/</guid>
      <description>Keeping track of how NULL values are handled in different SQL dialects can be tricky. This post will serve as a living document where I keep track of how BigQuery does this.
NULL and STRING comparison Comparison always returns NULL.
SELECT CAST(NULL AS STRING) = &amp;#39;&amp;#39;, -- null  CAST(NULL AS STRING) = &amp;#39;value&amp;#39;, -- null  CAST(NULL AS STRING) = CAST(NULL AS STRING) -- null NULL and BOOL comparison NULL is not TRUE or FALSE.</description>
    </item>
    
    <item>
      <title>The practical use of repetition and definition levels in BigQuery</title>
      <link>https://boonepeter.github.io/posts/bigquery-records/</link>
      <pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://boonepeter.github.io/posts/bigquery-records/</guid>
      <description>Google&amp;rsquo;s Dremel paper is an interesting read that explains some of the concepts that underlie BigQuery. I am still processing the paper and have noticed a few things about repetition and definition levels that are relevant to the every day use of BigQuery.
Columnar Data and Records The underlying storage format for BigQuery is columnar. One of the first pieces of advice given to people using BigQuery is to only select the rows that you need.</description>
    </item>
    
    <item>
      <title>Unnecessary BigQuery Optimization</title>
      <link>https://boonepeter.github.io/posts/unnecessary_bigquery_optimization/</link>
      <pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://boonepeter.github.io/posts/unnecessary_bigquery_optimization/</guid>
      <description>I was reading a post about BigQuery cost optimization which stated this:
 Also remember you are charged for bytes processed in the first stage of query execution. Avoid creating a complex multistage query just to optimize for bytes processed in the intermediate stages, since there are no cost implications anyway (though you may achieve performance gains).
 I was curious about this, because I have written some queries to minimize reading data multiple times.</description>
    </item>
    
    <item>
      <title>Building some-recipes.com</title>
      <link>https://boonepeter.github.io/posts/building-some-recipes/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://boonepeter.github.io/posts/building-some-recipes/</guid>
      <description>Background Earlier this year I made my way through Fullstack Open, a course designed to teach modern Javascript-based web development.
In their words:
 The main focus is on building single page applications with ReactJS that use REST APIs built with Node.js. The course also contains a section on GraphQL, a modern alternative to REST APIs. The course covers testing, configuration and environment management, and the use of MongoDB for storing the applicationâ€™s data.</description>
    </item>
    
    <item>
      <title>How do Spotify Codes work?</title>
      <link>https://boonepeter.github.io/posts/2020-11-10-spotify-codes/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://boonepeter.github.io/posts/2020-11-10-spotify-codes/</guid>
      <description>Spotify Codes are QR-like codes that can be generated to easily share Spotify songs, artists, playlists, and users. I set out to figure out how they worked, which led me on a winding journey through barcode history, patents, packet sniffing, error correction, and Gray tables.
Spotify URIs Let&amp;rsquo;s start with Spotify URIs (Uniform Resource Identifiers). Different pieces of media (artists, albums, songs, playlists, users) all have a URI.
The ABBA song &amp;ldquo;Take a Chance on Me&amp;rdquo; has this URI:</description>
    </item>
    
  </channel>
</rss>
